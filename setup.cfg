
# [tool:pytest]
# DJANGO_SETTINGS_MODULE = django_project.settings_test


# see https://coverage.readthedocs.io/en/latest/config.html

[coverage:run]
source = .
omit = django_project/asgi.py, django_project/wsgi.py, manage.py, .venv/*, *LICENSE.txt, *README.txt, requirements.txt, reports/*, .nox/*, noxfile.py
branch = True
plugins = django_coverage_plugin

[coverage:report]
# ; Regexes for lines to exclude from consideration
# exclude_also =
#     ; Don't complain about missing debug-only code:
#     def __repr__
#     if self\.debug

#     ; Don't complain if tests don't hit defensive assertion code:
#     raise AssertionError
#     raise NotImplementedError

#     ; Don't complain if non-runnable code isn't run:
#     if 0:
#     if __name__ == .__main__.:

#     ; Don't complain about abstract methods, they aren't run:
#     @(abc\.)?abstractmethod

ignore_errors = True

# https://stackoverflow.com/questions/48776116/with-coverage-py-how-to-skip-coverage-of-import-and-def-statements#52322101
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:

[coverage:html]
directory = reports/coverage_html

[coverage:xml]
output = reports/coverage/coverage.xml

[django_coverage_plugin]
template_extensions = html, txt

[tool:pytest]
DJANGO_SETTINGS_MODULE = django_project.settings
# -- recommended but optional:
# added case files to be able to distinguish when using TestCase
python_files = tests.py test_*.py *_tests.py case_*.py cases_*.py *_case.py *_cases.py
pythonpath = .
# minversion = 6.0
# addopts = -ra -q
# testpaths =
#     tests
#     integration
