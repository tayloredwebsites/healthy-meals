[project]
name = "healthy-meals"
version = "0.1.0"
description = "Meet your Dietary Goals with Healthier Meals."
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = "==3.12.*"
license = { text = "AGPL-3.0-only" }
authors = [
  { name = "David A. Taylor", email = "tayloredwebsites@me.com" },
]
urls = { Repository = "https://github.com/tayloredwebsites/healthy-meals" }
keywords = [
  "python",
  "django",
  "nutrition",
  "goals",
  "bodybuilding",
  "health",
  "antinflammatory",
  "autoimmunity",
  "glycemia",
  "diet",
  "planning",
  "recipes",
  "preparation",
  "cooking",
]
classifiers = [
  "Development Status :: 4 - Alpha",
  "Environment :: Web",
  "Framework :: Django :: 5.0",
  "Intended Audience :: All interested",
  "License :: OSI Approved :: AGPL-3.0-only",
  "Natural Language :: English",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Topic :: Health",
]
# dependencies include all libraries that are used in both production and dev(elopment)
dependencies = [
  "asgiref",
  "certifi",
  "cffi",
  "charset-normalizer",
  "crispy-bootstrap5 ~=2024.10",
  "cryptography==39.0.1",
  "defusedxml==0.7.1",
  "django>=5.2",
  "django-allauth[openid,socialaccount] ~=65.2",
  "django-auditlog==3.0.0",
  "django_compressor==4.5.1",
  "django_coverage_plugin==3.1.0",
  "django-crispy-forms==2.3",
  "django-debug-toolbar ~=4.4",
  "django-safedelete==1.4.0",
  "gunicorn ~=23.0",
  "idna==3.4",
  "nox==2024.10.9",
  "oauthlib==3.2.2",
  "psycopg ~=3.2",
  "psycopg-binary ~=3.2",
  "pycparser==2.21",
  "PyJWT==2.6.0",
  "python3-openid==3.2.0",
  "python-decouple==3.8",
  "requests==2.32.3",
  "requests-oauthlib==1.3.1",
  "sqlparse==0.4.3",
  "typing_extensions ~=4.12",
  "urllib3==1.26.14",
  "whitenoise ~=6.7",
  # "binaryornot==0.4.4",
  # "django-libsass==0.9",
  # "djangorestframework==3.15.2" # See utils/functions exception handling
  # "django-upgrade==1.22.2",
  # "gitpython==3.1.43",
  # "pre-commit==4.1.0",
  # "pygithub==2.5",
  # "pyyaml==6.0.2",
]

[dependency-groups]
dev = [
  "beautifulsoup4>=4.13.4",
  "coverage>=7.9.2",
  "factory-boy>=3.3.3",
  "genbadge>=1.1.2",
  "ipython==8.31.0",
  "pytest (>=8.4.1,<9.0.0)",
  "pytest-django>=4.11.1",
  "pytest-factoryboy (>=2.8.1,<3.0.0)",
  "pytest-postgresql==7.0.1",
  "pytest-html>=4.1.1",
  # "pytest-cookies",
  # "pytest-instafail",
  # "pytest-xdist",
  # "black",
  # "djlint",
  # "flake8",
  # "myst-parser>=4",
  # "ruff==0.11.2",
  "sphinx>=8.2.3",
  "sphinx-mdinclude>=0.6.2",
  "sphinx-rtd-theme>=3.0.2",
  "sphinxcontrib-django>=2.5",
  "sphinxcontrib-napoleon>=0.7",
  # "sphinx.ext.autodoc",
  # "sphinx.ext.autosummary",
  # "sphinx.ext.intersphinx", # provides links to other .rst files
  # "sphinx.ext.viewcode",
  # "sphinxcontrib_django", # https://pypi.org/project/sphinxcontrib-django/
  # "sphinx_mdinclude", # https://pypi.org/project/sphinx_mdinclude/
  # "sphinx.ext.todo", # see: https://www.sphinx-doc.org/en/master/usage/extensions/todo.htm
  # "sphinx-autobuild",
]
# # "dev" dependency group includes libraries for development
# # - "dev" includes development, testing, linting, and documentation libraries
# dev = [
#   "healthy-meals[test,lint,docs]",
# ]
# # dev dependency group include libraries only used for production
# # To Do: set this up to prepare for going to production
# prod = [
# ]

[tool.setuptools]
py-modules = []

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
# addopts = "--ds=config.settings.test --reuse-db --import-mode=importlib"
# addopts = "-v --tb=short"
norecursedirs = [
  ".nox",
  ".git",
  "*/migrations/*",
  "*/static/*",
  "docs",
  ".venv",
  "*/__pycache__/*",
]
DJANGO_SETTINGS_MODULE = "healthy_meals.settings"
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py",
    "case_*.py",
    "cases_*.py",
    "*_case.py",
    "*_cases.py"
]

# ==== Coverage ====
[tool.coverage.run]
source = ["."]
branch = true
omit = [
    "*/migrations/*",
    "*/tests/*",
    "healthy_meals/asgi.py",
    "healthy_meals/wsgi.py",
    "manage.py",
    ".venv/*",
    "*LICENSE.txt",
    "*README.txt",
    "requirements*.txt",
    "docs/*",
    ".nox/*",
    "noxfile.py",
    "*/__init__.py"
]
plugins = ["django_coverage_plugin"] # include .html and .txt files
data_file = "docs/qa/coverage/.coverage"

[tool.coverage.report]
exclude_lines = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pragma: no cover",
]

ignore_errors = true

[tool.coverage.html]
directory = "docs/qa/coverage/html/"

[tool.coverage.xml]
output = "docs/qa/coverage/coverage.xml"

[tool.django.coverage.plugin]
 # include .html and .txt files
template_extensions = ["html", "txt", ""]


# # ==== mypy ====
# [tool.mypy]
# python_version = "3.12"
# check_untyped_defs = true
# ignore_missing_imports = true
# warn_unused_ignores = true
# warn_redundant_casts = true
# warn_unused_configs = true
# plugins = [
#     "mypy_django_plugin.main",
#     "mypy_drf_plugin.main",
# ]

# [[tool.mypy.overrides]]
# # Django migrations should not produce any errors:
# module = "*.migrations.*"
# ignore_errors = true

# [tool.django-stubs]
# django_settings_module = "config.settings.test"

# # ==== djLint ====
# [tool.djlint]
# blank_line_after_tag = "load,extends"
# close_void_tags = true
# format_css = true
# format_js = true
# # TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
# ignore = "H006,H030,H031,T002"
# include = "H017,H035"
# indent = 2
# max_line_length = 119
# profile = "django"

# [tool.djlint.css]
# indent_size = 2

# [tool.djlint.js]
# indent_size = 2

# [tool.ruff]
# target-version = "py312"
# # Exclude a variety of commonly ignored directories.
# extend-exclude = [
#     "*/migrations/*.py",
#     "staticfiles/*",
#     "docs/*",
# ]

# [tool.ruff.lint]
# select = [
#   "F",
#   "E",
#   "W",
#   "C90",
#   "I",
#   "N",
#   "UP",
#   "YTT",
#   # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
#   "ASYNC",
#   "S",
#   "BLE",
#   "FBT",
#   "B",
#   "A",
#   "COM",
#   "C4",
#   "DTZ",
#   "T10",
#   "DJ",
#   "EM",
#   "EXE",
#   "FA",
#   "ISC",
#   "ICN",
#   "G",
#   "INP",
#   "PIE",
#   "T20",
#   "PYI",
#   "PT",
#   "Q",
#   "RSE",
#   "RET",
#   "SLF",
#   "SLOT",
#   "SIM",
#   "TID",
#   "TC",
#   "INT",
#   # "ARG", # Unused function argument
#   "PTH",
#   "ERA",
#   "PD",
#   "PGH",
#   "PL",
#   "TRY",
#   "FLY",
#   # "NPY",
#   # "AIR",
#   "PERF",
#   # "FURB",
#   # "LOG",
#   "RUF",
# ]
# ignore = [
#   "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
#   "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
#   "SIM102", # sometimes it's better to nest
#   "UP038", # Checks for uses of isinstance/issubclass that take a tuple
#           # of types for comparison.
#           # Deactivated because it can make the code slow:
#           # https://github.com/astral-sh/ruff/issues/7871
#   "RUF100", # prevent claiming directive is not used when it is
#             # it is prevent individual lines from having errors
# #   "ERA001", # Does  not allow for commented out code
# #             # it is important to allow this in configuration files
# ]
# # The fixes in extend-unsafe-fixes will require
# # provide the `--unsafe-fixes` flag when fixing.
# extend-unsafe-fixes = [
#     "UP038",
# ]

# [tool.ruff.lint.isort]
# force-single-line = true

# # this is ignored by flake 8, even with "--config=pyproject.toml",  # noqa: ERA001
# #   got error: parsing errors: 'pyproject.toml - [line 13]: ']\n'  # noqa: ERA001
# #   it doesn't seem to like multi-line arrays  # noqa: ERA001
# # [tool.flake8]  # noqa: ERA001
# # max_line_length = 120  # noqa: ERA001
# # exclude = [  # noqa: ERA001
# #     "migrations",  # noqa: ERA001
# # ]  # noqa: ERA001
# # ignore = [  # noqa: ERA001
# #     "E252",  # noqa: ERA001
# # ]  # noqa: ERA001
# # select = [  # noqa: ERA001
# #     "E251",  # noqa: ERA001
# # ]  # noqa: ERA001
